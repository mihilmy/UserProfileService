const admin = require('firebase-admin');

const errors = require('../../config/errors');
const db = admin.database();

/**
 * Creates a new note. NoteIDs are the chronologically ordered keys generated by firebase.
 * 
 * @param {String} from From-TagferID represents the 'from' side of the connection
 * @param {String} to  To-TagferID represents the 'to' side of the connection
 * @param {Object} noteObject Contains the `content` and `updatedAt` timestamp
 */
function createNote(from, to, noteObject) {
  const noteRef = db.ref(`notes/${from}/${to}`).push();
  return noteRef.set(noteObject)
    .then(() => noteRef.key)
    .catch(() => { throw errors.APP_FIREBASE_DATABASE_ERROR; });
}

/**
 * Updates an existing note. The reason we delete and create a new entry is this allows us to levearge the keys to
 * provide ordering without needing to index our data.
 * 
 * @param {String} from From-TagferID represents the 'from' side of the connection
 * @param {String} to  To-TagferID represents the 'to' side of the connection
 * @param {Object} noteObject Contains the `content` and `updatedAt` timestamp
 */
function updateNote(from, to, noteObject){
  const { noteId, content, updatedAt } = noteObject;
  const notesRef = db.ref(`notes/${from}/${to}`);
  const newNoteId = notesRef.push().key;
  const updates = {};
  updates[noteId] = null;
  updates[newNoteId] = { content, updatedAt };

  return notesRef.update(updates)
    .then(() => newNoteId)
    .catch(() => { throw errors.APP_FIREBASE_DATABASE_ERROR; });
}

/**
 * Delete an existing note. 
 * 
 * @param {String} from From-TagferID represents the 'from' side of the connection
 * @param {String} to  To-TagferID represents the 'to' side of the connection
 * @param {String} noteId UUID generated by firebase
 */
function deleteNote(from, to, noteId) {
  return db.ref(`notes/${from}/${to}/${noteId}`).remove().catch(() => { throw errors.APP_FIREBASE_DATABASE_ERROR; });
}

/**
 * Gets all notes between to users. Since on creation we used chronologically ordered keys, ordering here needs to be
 * in reverse.
 * 
 * @param {String} from From-TagferID represents the 'from' side of the connection
 * @param {String} to  To-TagferID represents the 'to' side of the connection
 */
function getAllNotes(from, to) {
  return db.ref(`notes/${from}/${to}`).once('value').then(data => {
    const allNotes = new Array(data.numChildren());
    let index = data.numChildren() - 1;
    data.forEach(note => {
      const { content, updatedAt } = note.val();
      allNotes[index--] = { noteId: note.key, content , updatedAt };
    });

    return allNotes;
  }).catch(() => { throw errors.APP_FIREBASE_DATABASE_ERROR; });
}

module.exports = {
  createNote,
  updateNote,
  deleteNote,
  getAllNotes
};
